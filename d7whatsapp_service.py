#!/usr/bin/env python3
# coding=utf-8

# ======== Subscribe to D7WhatsApp and create templates ========
# Before starting nagios setup make sure you have a valid WhatsApp subscription on https://d7networks.com.
# Please contact support@d7networks.com or signup at https://d7networks.com to enable WhatsApp on your D7 Account. 
# Once the whatsapp account is registered with meta, You will have to create two different templates for notifications. 

# Template name: host_notification_1
# Body: 
# ***** Nagios *****
# Notification Type: {{1}}
# Host: {{2}}
# State: {{3}}
# Address: {{4}}
# Info: {{5}}
# Date/Time: {{6}}

# This alert was generated by Nagios

# Template name: service_notification_1
# Body: 
# ***** Nagios *****
# Notification Type: {{1}}
# Service: {{2}}
# Host: {{3}}
# Address: {{4}}
# State: {{5}}
# Date/Time: {{6}}
# Additional Info:{{7}}

# This alert was generated by Nagios

# Once these templates are approved by Meta, you can continue with the configurations. 

# ======== Installation Instructions ========

# 1. Nagios Setup
# Copy d7whatsapp_service.py and d7whatsapp_host.py python script files to your Nagios plugins folder and make it executable. 
# You can download it from https://github.com/d7networks/d7whatsapp-nagios

# Following are the location of plugins folder in different Operating Systems.

# Debian/Ubuntu: /usr/local/nagios/libexec
# Centos: /usr/lib/nagios/plugins (32 bit)
# /usr/lib64/nagios/plugins (64 bit)

# 2. Create commands for WhatsApp Host and service notifications. 
# Make sure to replace SOURCE_NUMBER with the number you've registered with D7WhatsApp. 

########################### WhatsApp ###########################
#define command{
#        command_name    host-notify-by-whatsapp
#        command_line    $USER1$/d7whatsapp_host.py --source_address "SOURCE_NUMBER" --to $CONTACTPAGER$ --template_id "host_notification_1"  --type "$NOTIFICATIONTYPE$" --host "$HOSTNAME$" --address "$HOSTADDRESS$" --state "$HOSTSTATE$" --date "$LONGDATETIME$" --info "$HOSTOUTPUT$"
#        }

#define command{
#  command_name    service-notify-by-whatsapp
#        command_line    $USER1$/d7whatsapp_service.py --source_address "SOURCE_NUMBER" --to $CONTACTPAGER$ --template_id "service_notification_1" --type "$NOTIFICATIONTYPE$" --service "$SERVICEDESC$" --host "$HOSTNAME$" --address "$HOSTADDRESS$" --state "$SERVICESTATE$" --date "$LONGDATETIME$" --info "$SERVICEOUTPUT$"
#  }
################################################################

# 3. Update contact template and add following lines after existing host and service notification commands.

# Default path : /usr/local/nagios/etc/objects/contacts.cfg or /usr/local/nagios/etc/objects/templates.cfg
# service_notification_commands notify-service-by-email,service-notify-by-whatsapp
# host_notification_commands notify-host-by-email,host-notify-by-whatsapp

# 4. Add a pager number to your contacts, make sure it has the international prefix


# ======== Support and Help ========

# You can get the latest version of this script from https://github.com/d7networks/d7whatsapp-nagios
# For all queries and help on installation please contact support@d7networks.com or visit https://d7networks.com
################################################################
# ** Remember to replace D7_TOKEN

import argparse
import sys
import json
import urllib.request

GW_URL = "https://api.d7networks.com/whatsapp/v2/send"

# Can be generated from https://app.d7networks.com/developer/applications'
D7TOKEN = "D7_TOKEN"

parser = argparse.ArgumentParser()
parser.add_argument('--source_address', help='Sender ID (Source Mobile Number) registered with Meta')
parser.add_argument('--to', help='SMS receiver mobile number, eg: 9715090xx')
parser.add_argument('--template_id', help='template_id of meta approved template', required=True)
parser.add_argument('--type', help='Notification Type', required=True)
parser.add_argument('--service', help='Service Name', required=True)
parser.add_argument('--host',  help='Host Name', required=True)
parser.add_argument('--address', help='Host address', required=True)
parser.add_argument('--state',  help='Host state', required=True)
parser.add_argument('--date',  help='Date & time',required=True)
parser.add_argument('--info',  help='Additional info', required=True)

if __name__ == '__main__':
    args = parser.parse_args()
    
    if not (args.to and args.source_address and args.template_id and args.type and args.host and args.address and args.state and args.date and args.info ):
        print("All the arguments are required to send WhatsApp messages")
        sys.exit(1)

    to = args.to.strip('\'').replace(' ', '')
    # .split(',')
    
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer ' + D7TOKEN
    }

    
    messages = [
        {
            "originator": args.source_address,
            "content": {
                "message_type": "TEMPLATE",
                "template": {
                    "template_id": args.template_id,
                    "language": "en_GB",
                    "body_parameter_values": {
                        "1": args.type,
                        "2": args.service,
                        "3": args.host,
                        "4": args.address,
                        "5": args.state,
                        "6": args.date,
                        "7": args.info
                    }
                }
            },
            "recipients": [{"recipient": to, "recipient_type": "individual"}]
        }
    ]

    json_data = json.dumps({
        "messages": messages
    })
    
    req = urllib.request.Request(GW_URL, data=json_data.encode('utf-8'), headers=headers)
    try:
        response = urllib.request.urlopen(req, timeout=10)
    except urllib.error.HTTPError as e:
        print(f"Failed to send message, reason: {e.reason}, code: {e.code}")
        response_data = e.read().decode('utf-8')
        print("Error details:", response_data)
    else:
        response_data = response.read().decode('utf-8')
        print(response_data)

